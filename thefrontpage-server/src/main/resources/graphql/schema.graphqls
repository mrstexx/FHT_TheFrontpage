type User {
    id: ID!
    username: String!
    email: String!
    createdAt: String!
    communities: [Community]
}

type Community {
    id: ID!
    name: String!
    description: String
    createdAt: String!
    posts: [Post]
    createdBy: User
    members: [User]
}

type Post {
    id: ID!
    title: String!
    body: String
    url: String
    createdAt: String!
    community: Community
    user: User
    voteCount: Int
    comments: [Comment]
}

type Comment {
    id: ID!
    body: String!
    createdAt: String!
    post: Post
    user: User
}

type Vote {
    id: ID!
    voteType: VoteType
    post: Post
    user: User
}

type Auth {
    authToken: String!
    username: String!
    expiresAt: String!
}

enum VoteType {
    UP_VOTE
    DOWN_VOTE
}

input RegisterRequest {
    username: String!
    password: String!
    email: String!
}

input LoginRequest {
    username: String!
    password: String!
}

input PostRequest {
    id: ID
    communityName: String!
    title: String!
    url: String
    body: String
}

input CommentRequest {
    id: ID
    postId: ID!
    body: String!
}

input CommunityRequest {
    name: String!
    description: String
}

input VoteRequest {
    voteType: VoteType!
    postId: ID!
}

# All available mutations on this graphql server
type Mutation {
    createCommunity(input: CommunityRequest): Community!
    updateCommunity(input: CommunityRequest): Boolean
    deleteCommunity(name: String): Boolean
    followCommunity(name: String): Boolean
    unfollowCommunity(name: String): Boolean
    createPost(input: PostRequest): Post!
    updatePost(input: PostRequest): Boolean
    deletePost(postId: ID): Boolean
    createComment(input: CommentRequest): Comment!
    updateComment(input: CommentRequest): Boolean
    deleteComment(commentId: ID): Boolean
    vote(input: VoteRequest): Boolean
    login(input: LoginRequest): Auth
    register(input: RegisterRequest): Boolean
    confirmToken(token: String): Boolean
}

# All available queries on this graphql server
type Query {
    getAllPosts: [Post]
    getPostById(id: ID): Post
    getAllCommunities: [Community]
    getCommunityByName(name: String): Community
    getCommentsByPostId(postId: ID): [Comment]
}

schema {
    query: Query
    mutation: Mutation
}